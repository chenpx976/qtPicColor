name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11']
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Get version
      id: version
      run: |
        VERSION=$(uv run python get_version.py)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # 安装必要的系统依赖
        brew install create-dmg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv sync --dev
        # 使用 uv 安装额外的构建依赖
        uv add pyinstaller
    
    - name: Create PyInstaller spec file
      shell: bash
      run: |
        cat > qtpiccolor.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        from pathlib import Path

        block_cipher = None

        # 获取源码路径
        src_path = Path('src')
        
        a = Analysis(
            ['src/qtpiccolor/__main__.py'],
            pathex=[str(src_path), str(src_path / 'qtpiccolor')],
            binaries=[],
            datas=[
                ('src/qtpiccolor/resources', 'qtpiccolor/resources'),
            ],
            hiddenimports=[
                'PyQt6.QtCore',
                'PyQt6.QtGui', 
                'PyQt6.QtWidgets',
                'PIL',
                'PIL.Image',
                'PIL.ImageDraw',
                'numpy',
                'sklearn',
                'skimage',
                'qtpiccolor',
                'qtpiccolor.main',
                'qtpiccolor.ui',
                'qtpiccolor.core',
                'qtpiccolor.utils',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[
                'tkinter',
                'matplotlib',
                'scipy.tests',
                'numpy.tests',
                'sklearn.tests',
            ],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='qtPicColor',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            icon='src/qtpiccolor/resources/icon.ico' if sys.platform == 'win32' else 'src/qtpiccolor/resources/icon.icns',
            version='version_info.txt' if sys.platform == 'win32' else None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='qtPicColor',
        )

        if sys.platform == 'darwin':
            app = BUNDLE(
                coll,
                name='qtPicColor.app',
                icon='src/qtpiccolor/resources/icon.icns',
                bundle_identifier='com.qtpiccolor.app',
                info_plist={
                    'NSPrincipalClass': 'NSApplication',
                    'NSAppleScriptEnabled': False,
                    'NSHighResolutionCapable': True,
                    'CFBundleShortVersionString': '${{ steps.version.outputs.version }}',
                    'CFBundleVersion': '${{ steps.version.outputs.version }}',
                    'CFBundleDisplayName': 'qtPicColor',
                    'CFBundleName': 'qtPicColor',
                    'CFBundleExecutable': 'qtPicColor',
                    'CFBundlePackageType': 'APPL',
                    'CFBundleSignature': '????',
                    'LSMinimumSystemVersion': '10.15.0',
                    'NSRequiresAquaSystemAppearance': False,
                    'CFBundleDocumentTypes': [
                        {
                            'CFBundleTypeName': 'Image',
                            'CFBundleTypeRole': 'Viewer',
                            'LSItemContentTypes': ['public.image', 'public.jpeg', 'public.png'],
                            'CFBundleTypeExtensions': ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff'],
                        }
                    ]
                },
            )
        EOF
    
    - name: Create Windows version info file
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $versionParts = $version.Split('.')
        $major = $versionParts[0]
        $minor = if ($versionParts.Length -gt 1) { $versionParts[1] } else { "0" }
        $patch = if ($versionParts.Length -gt 2) { $versionParts[2] } else { "0" }
        
        @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($major, $minor, $patch, $build),
            prodvers=($major, $minor, $patch, $build),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo(
              [
                StringTable(
                  u'040904B0',
                  [StringStruct(u'CompanyName', u'qtPicColor Team'),
                   StringStruct(u'FileDescription', u'图片颜色分析工具'),
                   StringStruct(u'FileVersion', u'$version'),
                   StringStruct(u'InternalName', u'qtPicColor'),
                   StringStruct(u'LegalCopyright', u'Copyright © 2024 qtPicColor Team'),
                   StringStruct(u'OriginalFilename', u'qtPicColor.exe'),
                   StringStruct(u'ProductName', u'qtPicColor'),
                   StringStruct(u'ProductVersion', u'$version')])
              ]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@ | Out-File -FilePath version_info.txt -Encoding UTF8
    
    - name: Create default icon files (if not exist)
      run: |
        mkdir -p src/qtpiccolor/resources
        uv run python -c "
        from PIL import Image, ImageDraw, ImageFont
        import os
        import shutil
        from pathlib import Path
        
        # 创建一个更好看的图标
        img = Image.new('RGBA', (512, 512), (70, 130, 180, 255))
        draw = ImageDraw.Draw(img)
        
        # 绘制圆形背景
        draw.ellipse([50, 50, 462, 462], fill=(255, 255, 255, 255))
        draw.ellipse([60, 60, 452, 452], fill=(70, 130, 180, 255))
        
        # 绘制文字
        try:
            font = ImageFont.truetype('Arial', 120)
        except:
            font = ImageFont.load_default()
        
        text = 'QPC'
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        x = (512 - text_width) // 2
        y = (512 - text_height) // 2 - 20
        
        draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)
        
        # 保存为不同格式
        if os.name == 'nt':  # Windows
            img.save('src/qtpiccolor/resources/icon.ico', format='ICO', sizes=[(256, 256), (128, 128), (64, 64), (32, 32), (16, 16)])
            print('Windows图标文件创建成功')
        else:  # macOS/Linux
            img.save('src/qtpiccolor/resources/icon.png')
            print('PNG图标文件创建成功')
        "
    
    - name: Create macOS icon (ICNS)
      if: runner.os == 'macOS'
      run: |
        # 创建iconset目录结构
        mkdir -p src/qtpiccolor/resources/icon.iconset
        
        # 使用Python创建不同尺寸的图标
        uv run python -c "
        from PIL import Image
        import os
        
        # 读取基础图标
        base_img = Image.open('src/qtpiccolor/resources/icon.png')
        
        # 创建不同尺寸的图标
        icon_sizes = [
            (16, 'icon_16x16.png'),
            (32, 'icon_16x16@2x.png'),
            (32, 'icon_32x32.png'),
            (64, 'icon_32x32@2x.png'),
            (128, 'icon_128x128.png'),
            (256, 'icon_128x128@2x.png'),
            (256, 'icon_256x256.png'),
            (512, 'icon_256x256@2x.png'),
            (512, 'icon_512x512.png'),
            (1024, 'icon_512x512@2x.png'),
        ]
        
        for size, filename in icon_sizes:
            resized = base_img.resize((size, size), Image.Resampling.LANCZOS)
            resized.save(f'src/qtpiccolor/resources/icon.iconset/{filename}')
        
        print('iconset文件创建完成')
        "
        
        # 使用iconutil创建.icns文件
        iconutil -c icns src/qtpiccolor/resources/icon.iconset -o src/qtpiccolor/resources/icon.icns
        
        # 验证文件是否创建成功
        if [ -f "src/qtpiccolor/resources/icon.icns" ]; then
            echo "✓ macOS图标文件创建成功: icon.icns"
            ls -la src/qtpiccolor/resources/icon.icns
        else
            echo "✗ macOS图标文件创建失败"
            exit 1
        fi
        
        # 清理临时文件
        rm -rf src/qtpiccolor/resources/icon.iconset
    
    - name: Build with PyInstaller
      run: |
        uv run pyinstaller qtpiccolor.spec --clean --noconfirm
    
    - name: Test built application
      run: |
        echo "测试构建的应用程序..."
        
        if [ "$RUNNER_OS" = "macOS" ]; then
            # macOS测试
            if [ -d "dist/qtPicColor.app" ]; then
                echo "✓ qtPicColor.app 存在"
                ls -la dist/qtPicColor.app/Contents/MacOS/
                
                # 测试应用程序是否可以启动（无GUI模式）
                echo "测试应用程序启动..."
                timeout 10s dist/qtPicColor.app/Contents/MacOS/qtPicColor --help || echo "应用程序测试完成"
            else
                echo "✗ qtPicColor.app 不存在"
                exit 1
            fi
        elif [ "$RUNNER_OS" = "Windows" ]; then
            # Windows测试
            if [ -f "dist/qtPicColor/qtPicColor.exe" ]; then
                echo "✓ qtPicColor.exe 存在"
                ls -la dist/qtPicColor/
                
                # 测试应用程序是否可以启动（无GUI模式）
                echo "测试应用程序启动..."
                timeout 10s dist/qtPicColor/qtPicColor.exe --help || echo "应用程序测试完成"
            else
                echo "✗ qtPicColor.exe 不存在"
                exit 1
            fi
        fi
    
    - name: Create DMG (macOS)
      if: runner.os == 'macOS'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # 验证App是否构建成功
        if [ ! -d "dist/qtPicColor.app" ]; then
            echo "✗ qtPicColor.app 不存在，无法创建DMG"
            exit 1
        fi
        
        echo "✓ 找到 qtPicColor.app，开始创建DMG..."
        ls -la dist/qtPicColor.app
        
        # 创建DMG临时目录
        DMG_DIR="dist/dmg"
        mkdir -p "$DMG_DIR"
        
        # 复制应用到DMG目录
        cp -R dist/qtPicColor.app "$DMG_DIR/"
        
        # 创建Applications文件夹的符号链接
        ln -s /Applications "$DMG_DIR/Applications"
        
        # 设置DMG文件名
        DMG_NAME="qtPicColor-v$VERSION-macOS.dmg"
        DMG_PATH="dist/$DMG_NAME"
        
        # 删除可能存在的旧DMG文件
        rm -f "$DMG_PATH"
        
        echo "创建DMG: $DMG_NAME"
        
        # 创建DMG
        if command -v create-dmg >/dev/null 2>&1; then
            # 使用create-dmg工具
            create-dmg \
              --volname "qtPicColor v$VERSION" \
              --volicon "src/qtpiccolor/resources/icon.icns" \
              --window-pos 200 120 \
              --window-size 800 400 \
              --icon-size 100 \
              --icon "qtPicColor.app" 200 190 \
              --hide-extension "qtPicColor.app" \
              --app-drop-link 600 185 \
              --no-internet-enable \
              "$DMG_PATH" \
              "$DMG_DIR/"
        else
            # 备用方案：使用hdiutil
            echo "create-dmg不可用，使用hdiutil创建DMG..."
            
            # 创建临时DMG
            TEMP_DMG="dist/temp.dmg"
            hdiutil create -srcfolder "$DMG_DIR" -volname "qtPicColor v$VERSION" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size 200m "$TEMP_DMG"
            
            # 挂载DMG进行自定义
            MOUNT_DIR="/Volumes/qtPicColor v$VERSION"
            hdiutil attach "$TEMP_DMG" -readwrite -mount required
            
            # 等待挂载完成
            sleep 2
            
            # 设置窗口属性（如果可能）
            if [ -d "$MOUNT_DIR" ]; then
                echo "设置DMG窗口属性..."
                # 这里可以添加更多的窗口自定义设置
            fi
            
            # 卸载DMG
            hdiutil detach "$MOUNT_DIR" || true
            
            # 转换为只读DMG
            hdiutil convert "$TEMP_DMG" -format UDZO -imagekey zlib-level=9 -o "$DMG_PATH"
            
            # 清理临时文件
            rm -f "$TEMP_DMG"
        fi
        
        # 验证DMG是否创建成功
        if [ -f "$DMG_PATH" ]; then
            echo "✓ DMG创建成功: $DMG_NAME"
            ls -la "$DMG_PATH"
            
            # 验证DMG内容
            echo "验证DMG内容..."
            hdiutil attach "$DMG_PATH" -readonly -mount required
            sleep 2
            if [ -d "/Volumes/qtPicColor v$VERSION/qtPicColor.app" ]; then
                echo "✓ DMG内容验证成功"
                hdiutil detach "/Volumes/qtPicColor v$VERSION" || true
            else
                echo "✗ DMG内容验证失败"
                hdiutil detach "/Volumes/qtPicColor v$VERSION" || true
                exit 1
            fi
        else
            echo "✗ DMG创建失败"
            exit 1
        fi
        
        # 清理临时目录
        rm -rf "$DMG_DIR"
    
    - name: Create Windows Installer
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $versionParts = $version.Split('.')
        $major = $versionParts[0]
        $minor = if ($versionParts.Length -gt 1) { $versionParts[1] } else { "0" }
        $patch = if ($versionParts.Length -gt 2) { $versionParts[2] } else { "0" }
        
        # 安装NSIS
        choco install nsis -y
        
        # 创建NSIS安装脚本
        @"
        !define APPNAME "qtPicColor"
        !define COMPANYNAME "qtPicColor Team"
        !define DESCRIPTION "图片颜色分析工具"
        !define VERSIONMAJOR $major
        !define VERSIONMINOR $minor
        !define VERSIONBUILD $patch
        !define VERSION "$version"
        !define HELPURL "https://github.com/qtpiccolor/qtpiccolor"
        !define UPDATEURL "https://github.com/qtpiccolor/qtpiccolor/releases"
        !define ABOUTURL "https://github.com/qtpiccolor/qtpiccolor"
        !define INSTALLSIZE 150000

        RequestExecutionLevel admin
        InstallDir "`$PROGRAMFILES\`${APPNAME}"
        Name "`${APPNAME} v`${VERSION}"
        Icon "src\qtpiccolor\resources\icon.ico"
        outFile "dist\qtPicColor-v$version-Windows-Setup.exe"

        !include LogicLib.nsh

        page directory
        page instfiles

        !macro VerifyUserIsAdmin
        UserInfo::GetAccountType
        pop `$0
        `${If} `$0 != "admin"
            messageBox mb_iconstop "需要管理员权限才能安装此程序。"
            setErrorLevel 740
            quit
        `${EndIf}
        !macroend

        function .onInit
            setShellVarContext all
            !insertmacro VerifyUserIsAdmin
        functionEnd

        section "install"
            setOutPath `$INSTDIR
            file /r "dist\qtPicColor\*"
            
            writeUninstaller "`$INSTDIR\uninstall.exe"

            createDirectory "`$SMPROGRAMS\`${APPNAME}"
            createShortCut "`$SMPROGRAMS\`${APPNAME}\`${APPNAME}.lnk" "`$INSTDIR\qtPicColor.exe" "" "`$INSTDIR\qtPicColor.exe"
            createShortCut "`$DESKTOP\`${APPNAME}.lnk" "`$INSTDIR\qtPicColor.exe" "" "`$INSTDIR\qtPicColor.exe"

            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "DisplayName" "`${APPNAME} - `${DESCRIPTION}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "UninstallString" "`$\"`$INSTDIR\uninstall.exe`$\""
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "QuietUninstallString" "`$\"`$INSTDIR\uninstall.exe`$\" /S"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "InstallLocation" "`$\"`$INSTDIR`$\""
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "DisplayIcon" "`$\"`$INSTDIR\qtPicColor.exe`$\""
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "Publisher" "`${COMPANYNAME}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "HelpLink" "`${HELPURL}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "URLUpdateInfo" "`${UPDATEURL}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "URLInfoAbout" "`${ABOUTURL}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "DisplayVersion" "`${VERSION}"
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "VersionMajor" `${VERSIONMAJOR}
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "VersionMinor" `${VERSIONMINOR}
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "NoModify" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "NoRepair" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "EstimatedSize" `${INSTALLSIZE}
        sectionEnd

        section "uninstall"
            delete "`$SMPROGRAMS\`${APPNAME}\`${APPNAME}.lnk"
            rmDir "`$SMPROGRAMS\`${APPNAME}"
            delete "`$DESKTOP\`${APPNAME}.lnk"
            
            rmDir /r "`$INSTDIR"
            
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}"
        sectionEnd
        "@ | Out-File -FilePath installer.nsi -Encoding UTF8
        
        # 编译安装程序
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
    
    - name: Create ZIP archive (Windows)
      if: runner.os == 'Windows'
      run: |
        $version = "${{ steps.version.outputs.version }}"
        # 创建便携版ZIP
        Compress-Archive -Path "dist\qtPicColor\*" -DestinationPath "dist\qtPicColor-v$version-Windows-Portable.zip"
    
    - name: Create ZIP archive (macOS)
      if: runner.os == 'macOS'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        # 创建便携版ZIP
        cd dist
        zip -r "qtPicColor-v$VERSION-macOS-Portable.zip" qtPicColor.app
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qtPicColor-${{ runner.os }}-v${{ steps.version.outputs.version }}
        path: |
          dist/*.dmg
          dist/*.exe
          dist/*.zip
        retention-days: 30
        if-no-files-found: warn
    
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.dmg
          dist/*.exe
          dist/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "qtPicColor v${{ steps.version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 